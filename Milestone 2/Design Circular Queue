//code:

class MyCircularQueue {
    int *arr;
    int front;
    int rear;
    int size;
    
public:
    MyCircularQueue(int k) {
        size=k;
        arr=new int[size];
        front=-1;
        rear=-1;
    }
    
    bool enQueue(int value) {
        if(isFull()){
            return false;
        }
        else{
             if(front==-1){
                //1st element
                front=0;
                rear=0;  
            }
            else if(rear==size-1 && front!=0){
                rear=0;
            }
            else{
                rear++;
            }
            arr[rear]=value;
            return true;
        }
       
    }
    
    bool deQueue() {
        if(!isEmpty()){
            arr[front]=-1;
            //single element
            if(front==rear){
                front=-1;
                rear=-1;
            }
            else if(front==size-1)
                front=0;
            else
                front++;
            return true;
        }
        return false;
    }
    
    int Front() {
        if(isEmpty())
            return -1;
        return arr[front];
    }
    
    int Rear() {
        if(isEmpty())
            return -1;
        return arr[rear];
    }
    
    bool isEmpty() {
        if(front==-1)
            return true;
        return false;
    }
    
    bool isFull() {
        if((front==0 && rear==size-1)||(rear==((front-1)%(size))))
            return true;
        return false;
    }
};



